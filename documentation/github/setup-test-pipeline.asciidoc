:provider: GitHub
:pipeline_type: workflow
:trigger_sentence: This workflow will be configured to be executed as a job inside a CI workflow after the build job
:pipeline_type2: GitHub action
:path_provider: github
:extra_args_quarkus:
:extra_args_node:
:extra_args_angular:
:extra_args_python: --language-version 3.10
:extra_args_flutter: --language-version 3.3.4
:extra_sentence_ci: Please note that this workflow, although manually triggerable, is designed to be executed as part of a CI workflow, which you can create following this xref:./setup-ci-pipeline.asciidoc[guide].
:openBrowserFlag: -w
= Setting up a Test {pipeline_type} on {provider}

In this section we will create a test {pipeline_type} on {provider} for running project test cases. {trigger_sentence}, and consumes the artifact produced by the build {pipeline_type}.

The creation of this {pipeline_type2} will follow the project workflow, so a new branch named `feature/test-pipeline` will be created and the YAML file for the {pipeline_type} will be pushed to it.

Then, a Pull Request (PR) will be created in order to merge the new branch into the appropriate branch (provided in `-b` flag). The PR will be automatically merged if the repository policies are met. If the merge is not possible, either the PR URL will be shown as output, or it will be opened in your web browser if using `-w` flag.

The script located at `/scripts/pipelines/{path_provider}/pipeline_generator.sh` will automatically create new branch, create a test {pipeline_type} based on a YAML template appropriate for the project programming language or framework, create the Pull Request, and if it is possible, merge this new branch into the specified branch.

{extra_sentence_ci}

== Prerequisites

* This script will commit and push the corresponding YAML template into your repository, so please be sure your local repository is up-to-date (i.e you have pulled latest changes with `git pull`).

* [Optional] Having some knowledge about the application, in particular knowing if, when tested, it produces a log file or some other blob (e.g. performance profiling data) interesting to be kept as an artifact.

== Creating the {pipeline_type} using provided script

=== Usage
[subs=attributes+]
```
pipeline_generator.sh \
  -c <config file path> \
  -n <{pipeline_type} name> \
  -l <language or framework> \
  -d <project local path> \
  [-a <artifact source path>] \
  [-b <branch>] \
  [-w]
```

NOTE:  The config file for the test {pipeline_type} is located at `/scripts/pipelines/{path_provider}/templates/test/test-pipeline.cfg`.


=== Flags
[subs=attributes+]
```
-c, --config-file           [Required] Configuration file containing {pipeline_type} definition.
-n, --pipeline-name         [Required] Name that will be set to the {pipeline_type}.
-l, --language              [Required] Language or framework of the project.
-d, --local-directory       [Required] Local directory of your project.
-a, --artifact-path                    Path to be persisted as an artifact after {pipeline_type} execution, e.g. where the application stores logs or any other blob on runtime.
-b, --target-branch                    Name of the branch to which the Pull Request will target. PR is not created if the flag is not provided.
-w                                     Open the Pull Request on the web browser if it cannot be automatically merged. Requires -b flag.
```

=== Examples

==== Quarkus project

===== Quarkus native project

[subs=attributes+]
```
./pipeline_generator.sh -c ./templates/test/test-pipeline.cfg -n quarkus-project-test -l quarkus -d C:/Users/$USERNAME/Desktop/quarkus-project {extra_args_quarkus} -b develop {openBrowserFlag}
```

===== Quarkus project using JVM

[subs=attributes+]
```
./pipeline_generator.sh -c ./templates/test/test-pipeline.cfg -n quarkus-project-test -l quarkus-jvm -d C:/Users/$USERNAME/Desktop/quarkus-project {extra_args_quarkus} -b develop {openBrowserFlag}
```

==== Node.js project

[subs=attributes+]
```
./pipeline_generator.sh -c ./templates/test/test-pipeline.cfg -n node-project-test -l node -d C:/Users/$USERNAME/Desktop/node-project {extra_args_node} -b develop {openBrowserFlag}
```

==== Angular project

[subs=attributes+]
```
./pipeline_generator.sh -c ./templates/test/test-pipeline.cfg -n angular-project-test -l angular -d C:/Users/$USERNAME/Desktop/node-project {extra_args_angular} -b develop {openBrowserFlag}
```
