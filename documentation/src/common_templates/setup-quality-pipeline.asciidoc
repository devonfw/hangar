= Setting up a Quality {pipeline_type} on {provider}

In this section we will create a quality {pipeline_type} for analyzing project code with SonarQube. {trigger_sentence}, and consumes the artifact produced by the build {pipeline_type}.

The creation of this {pipeline_type2} will follow the project workflow, so a new branch named `feature/quality-pipeline` will be created and the YAML file for the {pipeline_type} will be pushed to it.

ifndef::no-PR-or-MR[]
Then, a Pull Request (PR) will be created in order to merge the new branch into the appropriate branch (provided in `-b` flag). The PR will be automatically merged if the repository policies are met. If the merge is not possible, either the PR URL will be shown as output, or it will be opened in your web browser if using `-w` flag.

endif::[]
ifdef::no-PR-or-MR[]
Then, the new branch will be merged into the appropriate branch (provided in `-b` flag).

endif::[]
The script located at `/scripts/pipelines/{path_provider}/pipeline_generator.sh` will automatically create this new branch, create a quality {pipeline_type} based on a YAML template appropriate for the project programming language or framework, create the Pull Request, and if it is possible, merge this new branch into the specified branch.

ifdef::extra_sentence_ci[]
{extra_sentence_ci}

endif::[]
== Prerequisites

* This script will commit and push the corresponding YAML template into your repository, so please be sure your local repository is up-to-date (i.e you have pulled the latest changes with `git pull`).
* Generate a SonarQube https://docs.sonarqube.org/latest/user-guide/user-token/[token] (just follow the section "Generating a token").

== Creating the {pipeline_type} using provided script

=== Usage
[subs=attributes+]
```
pipeline_generator.sh \
  -c <config file path> \
  -n <{pipeline_type} name> \
  -l <language or framework> \
  --sonar-url <sonarqube url> \
  --sonar-token <sonarqube token> \
  -d <project local path> \
ifdef::build-pipeline[  --build-pipeline-name <build {pipeline_type} name> \]
ifdef::test-pipeline[  --test-pipeline-name <test {pipeline_type} name> \]
  [-b <branch>] \
ifndef::no-PR-or-MR[  [-w]]
ifeval::["{provider}" == "Google Cloud"]
  [-m <machine type for {pipeline_type} runner>]
  [--env-vars <env vars list>]
  [--secret-vars <secret vars list>]
endif::[]
```

NOTE: The config file for the quality {pipeline_type} is located at `/scripts/pipelines/{path_provider}/templates/quality/quality-pipeline.cfg`.

=== Flags
[subs=attributes+]
```
-c, --config-file            [Required] Configuration file containing {pipeline_type} definition.
-n, --pipeline-name          [Required] Name that will be set to the {pipeline_type}.
-l, --language               [Required] Language or framework of the project.
    --sonar-url              [Required] SonarQube URL.
    --sonar-token            [Required] SonarQube token.
-d, --local-directory        [Required] Local directory of your project.
ifdef::build-pipeline[    --build-pipeline-name    [Required] Build {pipeline_type} name.]
ifdef::test-pipeline[    --test-pipeline-name     [Required] Test {pipeline_type} name.]
-b, --target-branch                     Name of the branch to which the Pull Request will target. PR is not created if the flag is not provided.
ifndef::no-PR-or-MR[-w                                      Open the Pull Request on the web browser if it cannot be automatically merged. Requires -b flag.]
ifeval::["{provider}" == "Google Cloud"]
-m, --machine-type                      Machine type for {pipeline_type} runner. Accepted values: E2_HIGHCPU_8, E2_HIGHCPU_32, N1_HIGHCPU_8, N1_HIGHCPU_32.
    --env-vars                          List of environment variables to be made available in pipeline. Syntax: "var1=val1 var2=val2 ...".
    --secret-vars                       List of environment variables (saved as secrets in Secret Manager) to be made available in pipeline. Syntax: "var1=val1 var2=val2 ...".
endif::[]
```

=== Examples

==== Quarkus project

[subs=attributes+]
```
./pipeline_generator.sh -c ./templates/quality/quality-pipeline.cfg -n quarkus-project-quality -l quarkus --sonar-url http://1.2.3.4:9000 --sonar-token 6ce6663b63fc02881c6ea4c7cBa6563b8247a04e -d C:/Users/$USERNAME/Desktop/quarkus-project {extra_args_quarkus} -b develop {openBrowserFlag}
```

==== Node.js project

[subs=attributes+]
```
./pipeline_generator.sh -c ./templates/quality/quality-pipeline.cfg -n node-project-quality -l node --sonar-url http://1.2.3.4:9000 --sonar-token 6ce6663b63fc02881c6ea4c7cBa6563b8247a04e -d C:/Users/$USERNAME/Desktop/node-project {extra_args_quarkus} -b develop {openBrowserFlag}
```

==== Angular project

[subs=attributes+]
```
./pipeline_generator.sh -c ./templates/quality/quality-pipeline.cfg -n angular-project-quality -l angular --sonar-url http://1.2.3.4:9000 --sonar-token 6ce6663b63fc02881c6ea4c7cBa6563b8247a04e -d C:/Users/$USERNAME/Desktop/angular-project {extra_args_angular} -b develop {openBrowserFlag}
```
ifeval::["{provider}" == "Google Cloud"]

==== Python project

[subs=attributes+]
```
./pipeline_generator.sh -c ./templates/quality/quality-pipeline.cfg -n python-project-quality -l python --sonar-url http://1.2.3.4:9000 --sonar-token 6ce6663b63fc02881c6ea4c7cBa6563b8247a04e -d C:/Users/$USERNAME/Desktop/python-project {extra_args_python} -b develop {openBrowserFlag}
```

==== Flutter project

[subs=attributes+]
```
./pipeline_generator.sh -c ./templates/quality/quality-pipeline.cfg -n flutter-project-quality -l flutter --sonar-url http://1.2.3.4:9000 --sonar-token 6ce6663b63fc02881c6ea4c7cBa6563b8247a04e -d C:/Users/$USERNAME/Desktop/flutter-project {extra_args_flutter} -b develop {openBrowserFlag}
```
endif::[]
