= Setting up a Deploy in Cloud Run {pipeline_type} on {provider}

In this section we will create a {pipeline_type} to deploy the project application as a service in Google Cloud Run. {trigger_sentence}.


The creation of the {pipeline_type2} will follow the project workflow, so a new branch named `feature/deploy-cloud-run` will be created and the YAML file for the {pipeline_type} will be pushed to it.

ifndef::no-PR-or-MR[]
Then, a Pull Request (PR) will be created in order to merge the new branch into the appropriate branch (provided in `-b` flag). The PR will be automatically merged if the repository policies are met. If the merge is not possible, either the PR URL will be shown as output, or it will be opened in your web browser if using `-w` flag.

endif::[]
ifdef::no-PR-or-MR[]
Then, the new branch will be merged into the appropriate branch (provided in `-b` flag).

endif::[]

The script located at `/scripts/pipelines/{path_provider}/pipeline_generator.sh` will automatically create this new branch, create a deploy {pipeline_type} based on a YAML template appropriate for targeting Cloud Run, create the Pull Request and, if it is possible, merge this new branch into the specified branch.

ifdef::extra_sentence_ci[]
{extra_sentence_ci}

endif::[]
== Prerequisites

* This script will commit and push the corresponding YAML template into your repository, so please be sure your local repository is up-to-date (i.e you have pulled latest changes with `git pull`).

* This {pipeline_type} consumes variables set by the package {pipeline_type}, so be sure to correctly setup it before creating this one.

== Creating the {pipeline_type} using provided script

=== Usage
[subs=attributes+]
```
pipeline_generator.sh \
  -c <config file path> \
  -n <{pipeline_type} name> \
  -d <project local path> \
  --service-name  <service name> \
  --gcloud-region <gcloud region> \
ifeval::["{provider}" == "Google Cloud"]
  [--package-pipeline-name <{pipeline_type} name>] \
endif::[]
  [--port <listening port>] \
  [-b <branch>] \
ifndef::no-PR-or-MR[  [-w]]
ifeval::["{provider}" == "Google Cloud"]
  [-m <machine type for {pipeline_type} runner>]]
  [--env-vars <env vars list>]
  [--secret-vars <secret vars list>]
endif::[]
```

NOTE: The config file for the deploy {pipeline_type} is located at `/scripts/pipelines/{path_provider}/templates/deploy-cloud-run/deploy-cloud-run-pipeline.cfg`.

ifeval::["{provider}" == "Google Cloud"]
NOTE: For this pipeline, the environment and secret variables will be made available on the containers created in Cloud Run.

endif::[]
=== Flags
[subs=attributes+]
```
-c, --config-file            [Required] Configuration file containing {pipeline_type} definition.
-n, --pipeline-name          [Required] Name that will be set to the {pipeline_type}.
-d, --local-directory        [Required] Local directory of your project.
    --service-name           [Required] Name for the Cloud Run service.
    --gcloud-region          [Required] Region where the service will be deployed.
ifeval::["{provider}" == "Google Cloud"]
    --package-pipeline-name             Package {pipeline_type} name.
endif::[]
    --port                              Listening port of the service. Default: 8080.
-b, --target-branch                     Name of the branch to which the Pull Request will target. PR is not created if the flag is not provided.
ifndef::no-PR-or-MR[-w                                      Open the Pull Request on the web browser if it cannot be automatically merged. Requires -b flag.]
ifeval::["{provider}" == "Google Cloud"]
-m, --machine-type                      Machine type for {pipeline_type} runner. Accepted values: E2_HIGHCPU_8, E2_HIGHCPU_32, N1_HIGHCPU_8, N1_HIGHCPU_32.]
    --env-vars                          List of environment variables to be made available in pipeline. Syntax: "var1=val1 var2=val2 ...".
    --secret-vars                       List of environment variables (saved as secrets in Secret Manager) to be made available in pipeline. Syntax: "var1=val1 var2=val2 ...".
endif::[]
```

=== Examples
[subs=attributes+]
```
./pipeline_generator.sh -c ./templates/deploy-cloud-run/deploy-cloud-run-pipeline.cfg -n project-deploy -d C:/Users/$USERNAME/Desktop/project --service-name application --gcloud-region europe-southwest1 --port 80 -b develop {openBrowserFlag}
```
