// Mocks generated by Mockito 5.3.2 from annotations
// in takeoff_lib/test/src/controllers/docker/docker_controller_factory_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:takeoff_lib/src/utils/folders/folders_service.dart' as _i4;
import 'package:takeoff_lib/src/utils/platform/platform_service.dart' as _i2;
import 'package:takeoff_lib/src/utils/system/system_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePlatformService_0 extends _i1.SmartFake
    implements _i2.PlatformService {
  _FakePlatformService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_1 extends _i1.SmartFake implements _i3.Directory {
  _FakeDirectory_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFoldersService_2 extends _i1.SmartFake
    implements _i4.FoldersService {
  _FakeFoldersService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PlatformService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformService extends _i1.Mock implements _i2.PlatformService {
  @override
  Map<String, String> get env => (super.noSuchMethod(
        Invocation.getter(#env),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
  @override
  bool get isWindows => (super.noSuchMethod(
        Invocation.getter(#isWindows),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isLinux => (super.noSuchMethod(
        Invocation.getter(#isLinux),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isMacOS => (super.noSuchMethod(
        Invocation.getter(#isMacOS),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isUnix => (super.noSuchMethod(
        Invocation.getter(#isUnix),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [FoldersService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoldersService extends _i1.Mock implements _i4.FoldersService {
  @override
  _i2.PlatformService get platformService => (super.noSuchMethod(
        Invocation.getter(#platformService),
        returnValue: _FakePlatformService_0(
          this,
          Invocation.getter(#platformService),
        ),
        returnValueForMissingStub: _FakePlatformService_0(
          this,
          Invocation.getter(#platformService),
        ),
      ) as _i2.PlatformService);
  @override
  set platformService(_i2.PlatformService? _platformService) =>
      super.noSuchMethod(
        Invocation.setter(
          #platformService,
          _platformService,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Directory getCacheFolder() => (super.noSuchMethod(
        Invocation.method(
          #getCacheFolder,
          [],
        ),
        returnValue: _FakeDirectory_1(
          this,
          Invocation.method(
            #getCacheFolder,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDirectory_1(
          this,
          Invocation.method(
            #getCacheFolder,
            [],
          ),
        ),
      ) as _i3.Directory);
  @override
  String getCacheFolderPath() => (super.noSuchMethod(
        Invocation.method(
          #getCacheFolderPath,
          [],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  bool createHostFolders() => (super.noSuchMethod(
        Invocation.method(
          #createHostFolders,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  Map<String, String> getHostFolders() => (super.noSuchMethod(
        Invocation.method(
          #getHostFolders,
          [],
        ),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
}

/// A class which mocks [SystemService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSystemService extends _i1.Mock implements _i5.SystemService {
  @override
  _i4.FoldersService get foldersService => (super.noSuchMethod(
        Invocation.getter(#foldersService),
        returnValue: _FakeFoldersService_2(
          this,
          Invocation.getter(#foldersService),
        ),
        returnValueForMissingStub: _FakeFoldersService_2(
          this,
          Invocation.getter(#foldersService),
        ),
      ) as _i4.FoldersService);
  @override
  set foldersService(_i4.FoldersService? _foldersService) => super.noSuchMethod(
        Invocation.setter(
          #foldersService,
          _foldersService,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<bool> checkSystemPrerequisites() => (super.noSuchMethod(
        Invocation.method(
          #checkSystemPrerequisites,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> isDockerDesktopInstalled() => (super.noSuchMethod(
        Invocation.method(
          #isDockerDesktopInstalled,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  bool isDockerRunning() => (super.noSuchMethod(
        Invocation.method(
          #isDockerRunning,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isDockerInstalled() => (super.noSuchMethod(
        Invocation.method(
          #isDockerInstalled,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
