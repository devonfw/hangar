// Mocks generated by Mockito 5.3.2 from annotations
// in takeoff_lib/test/src/utils/folders/folder_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:takeoff_lib/src/utils/platform/platform_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PlatformService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformService extends _i1.Mock implements _i2.PlatformService {
  @override
  Map<String, String> get env => (super.noSuchMethod(
        Invocation.getter(#env),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);
  @override
  bool get isWindows => (super.noSuchMethod(
        Invocation.getter(#isWindows),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isLinux => (super.noSuchMethod(
        Invocation.getter(#isLinux),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isMacOS => (super.noSuchMethod(
        Invocation.getter(#isMacOS),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isUnix => (super.noSuchMethod(
        Invocation.getter(#isUnix),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
