# Mandatory flags.
# For language and Dockerfile, we put them in the same field because we need one of them (same for user/password with aws credentials).
if test -z $awsAccessKey
then
    mandatoryFlags="$imageName,${dockerUser},${dockerPassword},${language}${dockerFile},$ciPipelineName,"
else
    mandatoryFlags="$imageName,${awsAccessKey},${awsSecretAccessKey},${awsRegion},${language}${dockerFile},$ciPipelineName,"
fi
# Path to the templates.
templatesPath="scripts/pipelines/github/templates/package"
# Path to the common templates folder
commonTemplatesPipelinePath="scripts/pipelines/common/templates/package"
# Var path
varPath=".github/vars"
# YAML file name.
yamlFile="package-pipeline.yml"
# Script name.
scriptFile="package.sh"
# Language agnostic package script.
packageCommon="package-common.sh"
# Language specific script.
packageLanguageScript="package-extra.sh"
# Source branch.
sourceBranch="feature/package-pipeline"
# DockerFile paths depending on the language.
dockerfilePaths="quarkus-jvm:src/main/docker/Dockerfile.jvm quarkus:src/main/docker/Dockerfile.native node:Dockerfile angular:Dockerfile"

function copyScript {

    # Check if the language is quarkus.
    if [[ $language == "quarkus"* ]]
    then
        language_bis="quarkus"
    else
        language_bis="$language"
    fi

    # Copy the scripts needed for the execution of the pipeline.
    cp "${hangarPath}/${commonTemplatesPipelinePath}/${packageCommon}" "${localDirectory}/${scriptFilePath}/${scriptFile}"
    cp "${hangarPath}/${commonTemplatesPipelinePath}/${language_bis}-${scriptFile}" "${localDirectory}/${scriptFilePath}/${packageLanguageScript}"
}

function addPipelineVariables {
    # Set the path to the Dockerfile based on the language.
    if test -z ${dockerFile}
    then
      for i in $dockerfilePaths
      do
        echo $i | grep "$language:" > /dev/null && dockerFile=$(echo $i | cut -d':' -f2) && break
      done
    fi

    # We set the path to the file that contains the version number to be used as docker version.
    for i in $dockerImageTagFilePaths
    do
      echo $i | grep "$language:" > /dev/null && imageTagFile=$(echo $i | cut -d':' -f2) && break
    done
    # Get the name of the registry from the full image name.
    firstPartImage=$(echo $imageName | cut -d'/' -f1)
    echo $firstPartImage | grep "\." > /dev/null && registry="$firstPartImage" || registry="docker.io"

    # Set variables in YAML file.
    if test ! -z $awsAccessKey
    then
        isECR="true"
    fi

    # In github we need to say where to extract the content of the build output (if it does not exists it will be created)
    # TODO: I think we should move this part into the addCommonPipelineVariables (maybe need to merge other block to do it)
    # because for every github workflow it will be used
    # or it can be added to the common library so it is easier to maintain
    if test -z $targetDirectory
    then
        setTargetDirectory
    fi

    export dockerFile awsRegion targetDirectory
    specificEnvSubstList='${dockerFile} ${awsRegion} ${targetDirectory}'
    mkdir -p ${localDirectory}/${varPath}
    echo "imageName=$imageName" > "${localDirectory}/${varPath}/registry_info.env"
    echo "registry=$registry" >> "${localDirectory}/${varPath}/registry_info.env"
    echo "isECR=$isECR" >> "${localDirectory}/${varPath}/registry_info.env"
    echo "region=$awsRegion" >> "${localDirectory}/${varPath}/registry_info.env"
    git add "${localDirectory}/${varPath}/registry_info.env"

    # Get the repo name.
    repoURL=$(git config --get remote.origin.url)
    repoNameWithGit="${repoURL/https:\/\/github.com\/}"
    repoName="${repoNameWithGit/.git}"

    # Add secrets.
    if test -z $awsAccessKey
    then
        gh secret set DOCKER_USER -a actions -b "$dockerUser" -R "$repoName"
        gh secret set DOCKER_PASSWORD -a actions -b "$dockerPassword" -R "$repoName"
    else
        gh secret set AWS_ACCESS_KEY -a actions -b "$awsAccessKey" -R "$repoName"
        gh secret set AWS_SECRET_ACCESS_KEY -a actions -b "$awsSecretAccessKey" -R "$repoName"
    fi
}
