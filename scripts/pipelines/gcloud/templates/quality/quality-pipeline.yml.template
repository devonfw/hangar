steps:
- id: "Get secrets"
  name: gcr.io/cloud-builders/gcloud
  entrypoint: bash
  args:
    - -c
    - |
        set -e
        [[ -f .pipelines/scripts/get-secrets.sh ]] || exit 0 && .pipelines/scripts/get-secrets.sh ${TRIGGER_NAME}
        [[ -f .pipelines/scripts/get-secret-vars.sh ]] || exit 0 && .pipelines/scripts/get-secret-vars.sh ${TRIGGER_NAME}

- id: "Download artifact"
  name: gcr.io/cloud-builders/gsutil
  script: |
    #!/bin/bash
    artifactPathAndName=$(gsutil ls gs://${PROJECT_ID}_cloudbuild/pipelinesArtifacts/${_BUILD_PIPELINE_NAME}/commit_${SHORT_SHA}/build_*.tar.zst | head -1)
    gsutil cp $artifactPathAndName .
  env:
    - 'PROJECT_ID=$PROJECT_ID'
    - '_BUILD_PIPELINE_NAME=${_BUILD_PIPELINE_NAME}'
    - 'SHORT_SHA=$SHORT_SHA'

- id: "Unpack artifact"
  name: alpine
  script: |
    #!/bin/sh
    set -e
    apk add --no-cache tar zstd
    tar -xf build_*.tar.zst
    
- id: "Download coverage"
  name: gcr.io/cloud-builders/gsutil
  allow_failure: true
  args:
    - cp
    - 'gs://${PROJECT_ID}_cloudbuild/pipelinesArtifacts/${testPipelineName}/commit_${SHORT_SHA}/coverage.xml'
    - .
    
- id: "Run Quality script"
  name: ${_DOCKER_IMAGE}
  secretEnv: ['SONAR_TOKEN']
  env:
    - PROJECT_PATH=./
    - SONAR_URL=${_SONAR_URL}
    - TRIGGER_NAME=${TRIGGER_NAME}
  script: |
    #!/bin/bash
    set -e
    [[ -f .pipelines/config/${TRIGGER_NAME}.env ]] && source .pipelines/config/${TRIGGER_NAME}.env
    .pipelines/scripts/quality.sh

# mark to insert trigger

# mark to insert step for additonal artifact #

availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/sonar-token/versions/latest
    env: 'SONAR_TOKEN'

# mark to insert entry in artifact for additonal artifact #
