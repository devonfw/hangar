#!/bin/bash
# Mandatory flags
mandatoryFlags="${pipelineName},$imageName,$buildPipelineName,${language}${dockerFile},$qualityPipelineName,"
[ $language == "python" ] && mandatoryFlags=$mandatoryFlags"${languageVersion},"
[ $language == "flutter" ] && mandatoryFlags=$mandatoryFlags"${registryLocation},${languageVersion},${flutterPlatform},"
# Path to the templates.
templatesPath="scripts/pipelines/gcloud/templates/package"
# Path to the common templates folder
commonTemplatesPipelinePath="scripts/pipelines/common/templates/package"
# YAML file name.
yamlFile="package-pipeline.yml"
# Script name.
scriptFile="package.sh"
# Language agnostic package script.
packageCommon="package-common.sh"
# Language specific script.
packageLanguageScript="package-extra.sh"
# Source branch.
sourceBranch="feature/package-pipeline"
#Dockerfile Paths depending on the language
dockerfilePaths="quarkus-jvm:src/main/docker/Dockerfile.jvm quarkus:src/main/docker/Dockerfile.native node:Dockerfile angular:Dockerfile python:Dockerfile flutter:Dockerfile"
dockerImageTagFilePaths="quarkus-jvm:pom.xml quarkus:pom.xml node:package.json angular:package.json flutter:pubspec.yaml"
# Branch trigger
branchTrigger='^(develop|release.*)$'
# Trigger Description
triggerDescription="Trigger for the package pipeline"
# Previous pipeline
previousPipelineyaml='quality-pipeline.yml'
# Roles that need to be applied to the cloud build service agent
roles="roles/secretmanager.secretAccessor roles/artifactregistry.repoAdmin roles/iam.serviceAccountUser"

function copyScript {

    # Check if the language is quarkus.
    if [[ $language == "quarkus"* ]]
    then
        language_bis="quarkus"
    else
        language_bis="$language"
    fi

    # Copy the scripts needed for the execution of the pipeline.
    cp "${hangarPath}/${commonTemplatesPipelinePath}/${packageCommon}" "${localDirectory}/${scriptFilePath}/${scriptFile}"
    cp "${hangarPath}/${commonTemplatesPipelinePath}/${language_bis}-${scriptFile}" "${localDirectory}/${scriptFilePath}/${packageLanguageScript}"
    cp "${hangarPath}/${templatesPath}/package-setup-environment.sh" "${localDirectory}/${scriptFilePath}/package-setup-environment.sh"
    if [[ $language == "flutter" ]]
    then
        if ! [ -z "${flutterPlatform}" ]
        then
            echo "export FLUTTER_PLATFORM=${flutterPlatform}" >> "${localDirectory}/${scriptFilePath}/package-setup-environment.sh"
        fi
        if ! [ -z "${flutterWebRenderer}" ]
        then
            echo "export FLUTTER_WEB_RENDERER=${flutterWebRenderer}" >> "${localDirectory}/${scriptFilePath}/package-setup-environment.sh"
        fi
    fi
}

# Function that adds the variables to be used in the pipeline.
function addPipelineVariables {

    case $language in
        node | angular) dockerImage="node" ;;
        quarkus*) dockerImage="maven:3-eclipse-temurin-11" ;;
        python) dockerImage="python:${languageVersion}-slim" ;;
        flutter) dockerImage="${registryLocation}-docker.pkg.dev/${gCloudProject}/flutter/flutter:${languageVersion}" ;;
        *) echo -e "${red}Error: Specified language '${language}' is not supported." >&2; exit 1
    esac

    # if the user did not specify a custom target-directory
    # we default to the language specific defaults
    if test -z $targetDirectory
    then
        setTargetDirectory
    fi

    # We set the path to the dockerfile depending on the language given.
    if test -z ${dockerFile}
    then
      for i in $dockerfilePaths
      do
        echo $i | grep "$language:" > /dev/null && dockerFile=$(echo $i | cut -d':' -f2) && break
      done
    fi

    # We get the name of the registry from the full image name
    firstPartImage=$(echo $imageName | cut -d'/' -f1)
    echo $firstPartImage | grep "\." > /dev/null && registry=$firstPartImage || registry="docker.io"

    if ! gcloud secrets describe registry-credentials &> /dev/null
    then
        gcloud secrets create registry-credentials --replication-policy="automatic"
    fi

    if test -z "$aws_access_key"
    then
       echo -e "DOCKER_USER=$dockerUser\nDOCKER_PASSWORD=$dockerPassword" | gcloud secrets versions add registry-credentials --data-file=-
    else
       echo "AWS_ACCESS_KEY=$awsAccessKey\nAWS_SECRET_ACCESS_KEY=$awsSecretAccessKey\nAWS_REGION=$awsRegion" | gcloud secrets versions add registry-credentials --data-file=-
    fi

    # Setting the list of variable that will be used for this trigger
    subsitutionVariable="_DOCKER_IMAGE=${dockerImage},_DOCKERFILE=${dockerFile},_REGISTRY=${registry},_IMAGE_NAME=${imageName},_BUILD_PIPELINE_NAME=${buildPipelineName},_BRANCH_NAME=\$BRANCH_NAME"
}

# Function that prepares Artifact Repository for storing the docker image
function createArtifactRegistry {
    # When using GCP Artifact Registry, make sure that the Docker repository exists before pushing to it, if not, create it
    repositoryName=$(echo "$imageName" | cut -d '/' -f 3)
    region=$(echo "$imageName" | cut -d '/' -f 1 | sed 's/-docker.pkg.dev//' )
    if ! gcloud artifacts repositories describe "$repositoryName" --location="$region" &> /dev/null
    then
        # We create the Docker repository in Artifact Registry
        gcloud artifacts repositories create "$repositoryName" --repository-format=docker --location="$region"
    fi
}

if [[ "$imageName" == *"docker.pkg.dev"* ]]
then
    type createArtifactRegistry &> /dev/null && createArtifactRegistry
fi

# Function that prepares a bucket for storing the .apk artifact
function createBucketforApk {
    oldPath="$PWD"
    cd "$localDirectory"
    gitOriginUrl=$(git config --get remote.origin.url)
    gCloudProject=$(echo "$gitOriginUrl" | cut -d'/' -f5)
    export gCloudProject
    gCloudRepo=$(echo "$gitOriginUrl" | cut -d'/' -f7)
    # We check if the bucket we need exists, we create it if not
    if (gcloud storage ls --project="$gCloudProject" | grep "$gCloudProject-apk" >> /dev/null)
    then
        echo -e "${green}Bucket $gCloudProject-apk already exists.${white}"
    else
        echo -e "${green}The bucket $gCloudProject-apk does not exist, creating it...${white}"
        if ! gcloud storage buckets create gs://"$gCloudProject"-apk --project="$gCloudProject"
        then
            echo -e "${red}Error: While creating bucket for $gCloudProject-apk." >&2
            echo -ne "${white}" >&2
            exit 1
        fi
    fi
    cd "$oldPath"
}

if [[ "$language" == "flutter" && "$flutterPlatform" == "android" ]]
then
    type createBucketforApk &> /dev/null && createBucketforApk
fi
