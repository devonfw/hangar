#!/bin/bash
# Mandatory flags
mandatoryFlags="${pipelineName},$imageName,$buildPipelineName,${language}${dockerFile},$qualityPipelineName,"
# Path to the templates.
templatesPath="scripts/pipelines/gcloud/templates/package"
# Path to the common templates folder
commonTemplatesPipelinePath="scripts/pipelines/common/templates/package"
# YAML file name.
yamlFile="package-pipeline.yml"
[ "$language" == "flutter" ] && yamlFile="flutter-package-pipeline.yml"
# Script name.
scriptFile="package.sh"
# Language agnostic package script.
packageCommon="package-common.sh"
# Language specific script.
packageLanguageScript="package-extra.sh"
# Source branch.
sourceBranch="feature/package-pipeline"
#Dockerfile Paths depending on the language
dockerfilePaths="quarkus-jvm:src/main/docker/Dockerfile.jvm quarkus:src/main/docker/Dockerfile.native node:Dockerfile angular:Dockerfile python:Dockerfile flutter:Dockerfile"
#dockerImageTagFilePaths="quarkus-jvm:pom.xml quarkus:pom.xml node:package.json angular:package.json"
# Branch trigger
branchTrigger='^(develop|release.*)$'
# Previous pipeline
previousPipelineyaml='quality-pipeline.yml'

function copyScript {

    # Check if the language is quarkus.
    if [[ $language == "quarkus"* ]]
    then
        language_bis="quarkus"
    else
        language_bis="$language"
    fi

    # Copy the scripts needed for the execution of the pipeline.
    cp "${hangarPath}/${commonTemplatesPipelinePath}/${packageCommon}" "${localDirectory}/${scriptFilePath}/${scriptFile}"
    cp "${hangarPath}/${commonTemplatesPipelinePath}/${language_bis}-${scriptFile}" "${localDirectory}/${scriptFilePath}/${packageLanguageScript}"
}

# Function that adds the variables to be used in the pipeline.
function addPipelineVariables {

    case $language in
        node | angular) dockerImage="node" ;;
        quarkus*) dockerImage="toDefine" ;;
        python) dockerImage="python:${languageVersion}-slim" ;;
        flutter) dockerImage="${registryLocation}-docker.pkg.dev/${gCloudProject}/flutter/flutter:${languageVersion}" ;;
        *) echo -e "${red}Error: Specified language '${language}' is not supported." >&2; exit 1
    esac

    # if the user did not specify a custom target-directory
    # we default to the language specific defaults
    if test -z $targetDirectory
    then
        setTargetDirectory
    fi

    # We set the path to the dockerfile depending on the language given.
    if test -z ${dockerFile}
    then
      for i in $dockerfilePaths
      do
        echo $i | grep "$language:" > /dev/null && dockerFile=$(echo $i | cut -d':' -f2) && break
      done
    fi

    # We get the name of the registry from the full image name
    firstPartImage=$(echo $imageName | cut -d'/' -f1)
    echo $firstPartImage | grep "\." > /dev/null && registry=$firstPartImage || registry="docker.io"

    if ! gcloud secrets describe registry-credentials &> /dev/null
    then
        gcloud secrets create registry-credentials --replication-policy="automatic"
    fi

    if test -z "$aws_access_key"
    then
       echo -e "DOCKER_USER=$dockerUser\nDOCKER_PASSWORD=$dockerPassword" | gcloud secrets versions add registry-credentials --data-file=-
    else
       echo "AWS_ACCESS_KEY=$awsAccessKey\nAWS_SECRET_ACCESS_KEY=$awsSecretAccessKey\nAWS_REGION=$awsRegion" | gcloud secrets versions add registry-credentials --data-file=-
    fi

    # Setting the list of variable that will be used for this trigger
    subsitutionVariable="_DOCKER_IMAGE=${dockerImage},_DOCKERFILE=${dockerFile},_REGISTRY=${registry},_IMAGE_NAME=${imageName},_BUILD_PIPELINE_NAME=${buildPipelineName},_BRANCH_NAME=\$BRANCH_NAME"
    if [[ $language == "flutter" ]]
    then
        subsitutionVariable=$subsitutionVariable",_FLUTTER_PLATFORM=${flutterPlatform},_FLUTTER_WEB_RENDERER=${flutterWebRenderer}"
        if [[ $flutterPlatform == "android" ]]
        then
            subsitutionVariable=$subsitutionVariable",_ANDROID_API_KEY=${androidApiKey}"
        fi
    fi

}
