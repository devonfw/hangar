steps:

- name: gcr.io/cloud-builders/gcloud
  id: Get credentials
  entrypoint: bash
  secretEnv: ['registry_credentials']
  args:
    - -c
    - echo $$registry_credentials > credentials.env

- id: "Download artifact from provisioning pipeline"
  name: gcr.io/cloud-builders/gsutil
  script: |
    #!/bin/bash
    artifactPathAndName=$(gsutil ls gs://${PROJECT_ID}_cloudbuild/pipelinesArtifacts/${_ENV_PROVISIONING_PIPELINE_NAME}/cluster_info.env | head -1)
    gsutil cp $artifactPathAndName .
  env:
    - 'PROJECT_ID=$PROJECT_ID'
    - '_ENV_PROVISIONING_PIPELINE_NAME=${_ENV_PROVISIONING_PIPELINE_NAME}'

- name: gcr.io/cloud-builders/gcloud
  id: Get Kubeconfig
  entrypoint: bash
  args:
    - -c
    - |
      . cluster_info.env
      gcloud container clusters get-credentials "$$CLUSTER_NAME" --region="$$CLUSTER_REGION"

- name: gcr.io/cloud-builders/gcloud
  entrypoint: bash
  id: Deploy
  args:
    - -c
    - |
      set -e
      echo -e "\n\n"
      echo "EXECUTING deploy-setup-environment.sh"
      . .pipelines/scripts/deploy-setup-environment.sh
      if [ "$_K8S_IMAGE_PULL_SECRET" != "" ]
      then
        echo -e "\n\n"
        echo "EXECUTING secret.sh"
        . credentials.env
        ./.pipelines/scripts/secrets.sh "$_K8S_NAMESPACE" "$_K8S_IMAGE_PULL_SECRET" "$${DOCKER_USER:-$$AWS_ACCESS_KEY}" "$${DOCKER_PASSWORD:-$$AWS_SECRET_ACCESS_KEY}" "$$REGISTRY" "$_K8S_DEPLOY_FILES/application-deployment.yaml"
      fi
      echo -e "\n\n"
      echo "EXECUTING deploy.sh"
      echo "./.pipelines/scripts/deploy.sh \"$_K8S_NAMESPACE\" \"$_IMAGE_NAME\" \"$$DNS_NAME\" \"$_K8S_DEPLOY_FILES/application-deployment.yaml\" \"$_K8S_DEPLOY_FILES/ingress.yaml\" \"$_K8S_DEPLOY_FILES\" \".pipelines/scripts/package-extra.sh\" \"$_BRANCH_NAME\""
      ./.pipelines/scripts/deploy.sh "$_K8S_NAMESPACE" "$_IMAGE_NAME" "$$DNS_NAME" "$_K8S_DEPLOY_FILES/application-deployment.yaml" "$_K8S_DEPLOY_FILES/ingress.yaml" "$_K8S_DEPLOY_FILES" ".pipelines/scripts/package-extra.sh" "$_BRANCH_NAME"
# mark to insert step for additonal artifact #

availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/registry-credentials/versions/latest
    env: 'registry_credentials'

# mark to insert entry in artifact for additonal artifact #