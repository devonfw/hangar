# Mandatory flags.
mandatoryFalgs="$localDirectory,$clusterName,$storageContainerName,"
# Path to the templates.
templatesPath="scripts/pipelines/gitlab/templates/aks"
#Path to common kubernetes templates.
commonKubernetesPath="scripts/pipelines/gitlab/templates/common/kubernetes"
# aks-provision YAML file name.
yamlFile="aks-provisioning.yml"
# Source branch.
sourceBranch="feature/aks-provisioning"
# Path to terraform templates.
terraformTemplatesPath="scripts/environment-provisioning/azure/aks"
# Path to terraform scripts.
terraformPath=".terraform/aks"
# Default cluster operation.
operation="create"
# Install Rancher on AKS cluster.
if test -z $installRancher
then
    installRancher=false
fi

# Function that copies the necessary scripts into the directory.
function copyScript {
    # Create .terraform/aks folder if it does not exist.
    mkdir -p "${localDirectory}/${terraformPath}"

    # Copy the terraform files.
    cd "${hangarPath}/${terraformTemplatesPath}"
    cp * "${localDirectory}/${terraformPath}"

    # Copy the script for the DNS name into the directory.
    cp "${hangarPath}/${templatesPath}/obtain-dns.sh" "${localDirectory}/${scriptFilePath}/obtain-dns.sh"

    # Copy the common files for kubernetes
    cp "${hangarPath}/${commonKubernetesPath}"/*.sh "${localDirectory}/${scriptFilePath}"
}

function commitFiles {
    # Add the terraform files.
    git add .terraform -f

    # Changing all files to be executable.
    find .terraform -type f -name '*.sh' -exec git update-index --chmod=+x {} \;

    # Git commit and push it into the repository.
    git commit -m "Adding the terraform files"
    git push -u origin ${sourceBranch}
}

# Function that adds the variables to be used in the pipeline.
function addPipelineVariables {
    export clusterName
    export storageContainerName
    export installRancher
    export operation
    specificEnvSubstList='${clusterName} ${operation} ${storageContainerName} ${installRancher}' #${resourceGroupName} ${storageAccountName} 
}
