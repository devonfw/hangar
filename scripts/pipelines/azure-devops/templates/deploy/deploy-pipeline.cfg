# List of the flages we used in different stages for deploy pipeline.
# Comma separated list of flags. Make sure to end with a comma, Eg: $name,$xyz,
mandatoryFlags="$pipelineName,$localDirectory,$packagePipelineName,$envProvisionPipelineName,$k8sProvider,$k8sNamespace,$k8sDeployFiles,"
# Path to the templates.
templatesPath="scripts/pipelines/azure-devops/templates/deploy"
# YAML file name.
yamlFile="deploy-pipeline.yml"
# Source branch.
sourceBranch="feature/deploy-pipeline"

# Function that copies the extra yaml files into the directory.
function copyScript {
    # Copy the deploy script.
    cp "${hangarPath}/${templatesPath}/deploy.sh" "${localDirectory}/${scriptFilePath}"
    
    # Copy the script for generating imagePullSecrets for private registries.  
    cp "${hangarPath}/${templatesPath}/secrets.sh" "${localDirectory}/${scriptFilePath}"
}

# Function that adds the variables to be used in the pipeline.
function addPipelineVariables {
    # Add the package pipeline name.
    az pipelines variable create --name "packagePipelineName" --pipeline-name $pipelineName --value $packagePipelineName

    # Add Kubernetes provider variable.
    az pipelines variable create --name "k8sProvider" --pipeline-name $pipelineName --value $k8sProvider

    # Add Kubernetes cluster namespace variable.
    az pipelines variable create --name "k8sNamespace" --pipeline-name $pipelineName --value $k8sNamespace
    
    # Add the manifest files path variable.
    az pipelines variable create --name "k8sDeployFiles" --pipeline-name $pipelineName --value $k8sDeployFiles

    if test ! -z ${secretsName}
    then
        # Add imagePullSecret name variable
        az pipelines variable create --name "k8sImagePullSecret" --pipeline-name $pipelineName --value $k8sImagePullSecret
    fi
    
    # Add the environment provision pipeline name.
    az pipelines variable create --name "envProvisionPipelineName" --pipeline-name $pipelineName --value $envProvisionPipelineName
}
