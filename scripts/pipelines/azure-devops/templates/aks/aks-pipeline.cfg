# Mandatory flags.
mandatoryFalgs="$pipelineName,$localDirectory,$resourceGroupName,$storageAccountName,$storageContainerName,"
# Path to the templates.
templatesPath="scripts/pipelines/azure-devops/templates/aks"
# Path to common kubernetes templates.
commonKubernetesPath="scripts/pipelines/azure-devops/templates/common/kubernetes"
# YAML file name.
yamlFile="aks-provisioning.yml"
# Source branch.
sourceBranch="feature/aks-provisioning"
# Path to the pipelines.
pipelinePath=".pipelines"
# Path to terraform templates.
terraformTemplatesPath="scripts/environment-provisioning/azure/aks"
# Path to terraform scripts.
terraformPath=".terraform/aks"
# Service connection to AKS.
serviceConnection="aks-connection"
# Path to the scripts.
scriptFilePath=".pipelines/scripts"
# Default cluster operation.
operation="create"
# Install Rancher on AKS cluster.
if test -z ${installRancher}
then
    installRancher=false
fi


# Function that copies the necessary scripts into the directory.
function copyScript {
    # Create .terraform/aks folder if it does not exist.
    mkdir -p "${localDirectory}/${terraformPath}"

    # Copy the terraform files.
    cd "${hangarPath}/${terraformTemplatesPath}"
    cp * "${localDirectory}/${terraformPath}"

    # Copy the script for the DNS name into the directory.
    cp "${hangarPath}/${templatesPath}/obtain-dns.sh" "${localDirectory}/${scriptFilePath}/obtain-dns.sh"

    # Copy the common files for kubernetes
    cp "${hangarPath}/${commonKubernetesPath}"/*.sh "${localDirectory}/${scriptFilePath}"
}

function commitFiles {
    # Add the terraform files.
    git add .terraform -f

    # Changing all files to be executable.
    find .terraform -type f -name '*.sh' -exec git update-index --chmod=+x {} \;

    # Git commit and push it into the repository.
    git commit -m "Adding the terraform files"
    git push -u origin ${sourceBranch}
}

# Function that adds the variables to be used in the pipeline.
function addPipelineVariables {
    # Add the resource group name variable.
    az pipelines variable create --name "resourceGroupName" --pipeline-name $pipelineName --value ${resourceGroupName}

    # Add the storage account name variable.
    az pipelines variable create --name "storageAccountName" --pipeline-name $pipelineName --value ${storageAccountName}

    # Add the storage container name variable.
    az pipelines variable create --name "storageContainerName" --pipeline-name $pipelineName --value ${storageContainerName}

    # Add the service connection variable.
    az pipelines variable create --name "serviceConnection" --pipeline-name $pipelineName --value ${serviceConnection}

    # Add the install rancher variable.
    az pipelines variable create --name "installRancher" --pipeline-name $pipelineName --value ${installRancher}

    # Add the variable to choose create or destroy AKS cluster
    az pipelines variable create --name "operation" --pipeline-name ${pipelineName} --value ${operation}

    # Create the PAT.
    organization=$(git config --get remote.origin.url)
    organization=$(echo $organization | cut -d/ -f4)
    pat=$(az rest --method post --uri "https://vssps.dev.azure.com/$organization/_apis/tokens/pats?api-version=7.1-preview.1" --resource "https://management.core.windows.net/" --body '{"displayName": "AKSVariableGroup", "scope":"vso.variablegroups_manage vso.build_execute"}')
    pat=$(echo $pat | python -c "import sys, json; print(json.load(sys.stdin)['patToken']['token'])")

    # Add the PAT variable.
    az pipelines variable create --name "pat" --pipeline-name $pipelineName --value ${pat}
}