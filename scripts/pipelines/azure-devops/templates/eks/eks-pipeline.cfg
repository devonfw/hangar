# The AWS Service Connection name created in Azure DevOps
awsServiceConnection="AWS-Terraform-Connection"
# Comma separated list of flags. Make sure to end with a comma, Eg: $name,$xyz,
groupid=$(az pipelines variable-group list --group-name "deployment-env-variables" --query '[0].id' -o  json)
if test -z $groupid
then
    mandatoryFlags="$pipelineName,$configFile,$localDirectory,$s3Bucket,$s3KeyPath,$clusterName,$awsAccessKey,$awsSecretAccessKey,$awsRegion,"
else
    mandatoryFlags="$pipelineName,$configFile,$localDirectory,$s3Bucket,$s3KeyPath,$clusterName,"
fi
# Path to the templates.
templatesPath="scripts/pipelines/azure-devops/templates/eks"
# Path to common kubernetes templates.
commonKubernetesPath="scripts/pipelines/azure-devops/templates/common/kubernetes"
# YAML file name.
yamlFile="eks-provisioning.yml"
# Source branch.
sourceBranch="feature/eks-provisioning"
# Path to terraform templates.
terraformTemplatesPath="scripts/environment-provisioning/aws/eks"
# Path to terraform scripts.
terraformPath=".terraform/eks"
# Default cluster operation.
operation="create"
# Install Rancher on EKS cluster.
if test -z ${installRancher}
then
    installRancher=false
fi

# Function that copies the terraform scripts into the directory.
function copyScript {
    # Create .terraform/eks folder if it does not exist.
    mkdir -p "${localDirectory}/${terraformPath}"

    # Copy the terraform files.
    cp "${hangarPath}/${terraformTemplatesPath}/"* "${localDirectory}/${terraformPath}"

    # Copy the script for the DNS name into the directory.
    cp "${hangarPath}/${commonTemplatesPath}/install-ingress-controller.sh" "${localDirectory}/${scriptFilePath}/install-ingress-controller.sh"

    # Copy the common files for kubernetes
    cp "${hangarPath}/${commonKubernetesPath}"/*.sh "${localDirectory}/${scriptFilePath}"

    # Copy the script for the DNS name into the directory.
    cp "${hangarPath}/${templatesPath}/obtain-dns.sh" "${localDirectory}/${scriptFilePath}/obtain-dns.sh"

    # Copy the folder for configuring prometheus if monitoring set to true
    if [[ "$setupMonitoring" != "false" ]]
    then
      mkdir -p "${localDirectory}/.prometheus"
      mkdir -p "${localDirectory}/tmp"
      wget https://github.com/prometheus-operator/kube-prometheus/archive/refs/heads/release-0.11.zip -O "${localDirectory}/tmp/kube-prometheus-v0.11.zip"
      unzip "${localDirectory}/tmp/kube-prometheus-v0.11.zip" -d "${localDirectory}/tmp"
      cp -r "${localDirectory}/tmp/kube-prometheus-release-0.11/manifests/"* "${localDirectory}/.prometheus"
      cp -r "${hangarPath}/scripts/monitoring/kube-prometheus/"* "${localDirectory}/.prometheus"
      rm -rf "${localDirectory}/tmp/"
    fi
}

function commitFiles {
    # Add the terraform files.
    git add .terraform -f

    # Changing all files to be executable.
    find .terraform -type f -name '*.sh' -exec git update-index --chmod=+x {} \;

    if [[ "$setupMonitoring" != "false" ]]
    then
      # Add the prometheus files
      git add .prometheus -f
      # Changing set up script to be executable
      git update-index --chmod=+x .prometheus/setup-k8s-monitoring.sh
      # Changing commit message
      additionalCommitMessage="and monitoring "
    fi

    # Git commit and push it into the repository.
    git commit -m "[skip ci] Adding the terraform ${additionalCommitMessage}files"
    git push -u origin ${sourceBranch}
}

# Function that adds the variables to be used in the pipeline.
function addPipelineVariables {
    # Add the AWS service coonection variable.
    az pipelines variable create --name "awsServiceConnection" --pipeline-name ${pipelineName} --value ${awsServiceConnection} --allow-override

    # Add the AWS S3 bucket name variable.
    az pipelines variable create --name "s3Bucket" --pipeline-name ${pipelineName} --value ${s3Bucket} --allow-override

    # Add the AWS S3 Key path variable.
    az pipelines variable create --name "s3KeyPath" --pipeline-name ${pipelineName} --value ${s3KeyPath} --allow-override

    # Add the EKS cluster name variable.
    az pipelines variable create --name "clusterName" --pipeline-name ${pipelineName} --value ${clusterName} --allow-override

    # Add the AWS Install Rancher variable
    az pipelines variable create --name "installRancher" --pipeline-name ${pipelineName} --value ${installRancher} --allow-override

    # Add the variable to choose create or destroy AWS EKS cluster
    az pipelines variable create --name "operation" --pipeline-name ${pipelineName} --value ${operation} --allow-override

    # Add the variable to set up monitoring
    [[ "$setupMonitoring" == "false" ]] || setupMonitoring="true"
    az pipelines variable create --name "setupMonitoring" --pipeline-name "$pipelineName" --value "${setupMonitoring}" --allow-override

    #Create PAT to manage variable group and add pipeline variable
    #Get organization
    cd "${localDirectory}"
    organization=$(git config --get remote.origin.url)
    organization=$(echo $organization | cut -d/ -f4)

    echo -e "${green}Creating a PAT with necessary permissions..."
    patToken=$(az rest --method post --uri "https://vssps.dev.azure.com/$organization/_apis/tokens/pats?api-version=7.1-preview.1" --resource "https://management.core.windows.net/" --body '{ "displayName": "CreateEKSVariablesToken", "validTo": "2099-02-25T11:44:36.1966667Z", "scope": "vso.variablegroups_manage vso.build_execute" }')
    patToken=$(echo "$patToken" | python -c  "import sys, json; print(json.load(sys.stdin)['patToken']['token'])")
    az pipelines variable create --name "pat" --pipeline-name ${pipelineName} --value $patToken --allow-override --secret true
    addAWSCredentialsToVariableGroup

}

function addAWSCredentialsToVariableGroup {
    if test -z $groupid
    then
        echo -e "${green}Adding AWS Credentials to variable group..."
        az pipelines variable-group create --name "deployment-env-variables" --variable "aws_region"="$awsRegion" --authorize true > ./tmp_group_var
        new_group_id=$(cat  ./tmp_group_var | grep '"id"' | cut -d: -f2 | cut -d, -f1 | tr -d \")
        rm ./tmp_group_var
        az pipelines variable-group variable create --group-id $new_group_id --name "aws_secret_access_key" --value "$awsSecretAccessKey" --secret true
        az pipelines variable-group variable create --group-id $new_group_id --name "aws_access_key" --value "$awsAccessKey" --secret true
    fi
}
