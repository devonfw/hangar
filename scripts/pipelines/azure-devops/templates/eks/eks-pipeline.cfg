# The AWS Service Connection name created in Azure DevOps
awsServiceConnection="AWS-Terraform-Connection"

# Comma separated list of flags. Make sure to end with a comma, Eg: $name,$xyz,
mandatoryFalgs="$pipelineName,$configFile,$localDirectory,$s3Bucket,$s3KeyPath,$clusterName,"
# Path to the templates.
templatesPath="scripts/pipelines/azure-devops/templates/eks"
# YAML file name.
yamlFile="eks-provisioning.yml"
# Source branch.
sourceBranch="feature/eks-provisioning"
# Path to the pipelines.
pipelinePath=".pipelines"
# Path to the scripts.
scriptFilePath=".pipelines/scripts"
# Path to terraform templates.
terraformTemplatesPath="scripts/environment-provisioning/aws/eks"
# Path to terraform scripts.
terraformPath=".terraform/eks"
# Default cluster operation.
operation="create"
# Install Rancher on EKS cluster.
if test -z ${installRancher}
    installRancher=false
fi

# Function that copies the terraform scripts into the directory.
function copyScript {
    # Create .terraform/eks folder if it does not exist.
    mkdir -p "${localDirectory}/${terraformPath}"

    # Copy the terraform files.
    cd "${hangarPath}/${terraformTemplatesPath}"
    cp * "${localDirectory}/${terraformPath}"
    
    # Copy the script for the DNS name into the directory.
    cp "${hangarPath}/${commonTemplatesPath}/install-ingress-controller.sh" "${localDirectory}/${scriptFilePath}/install-ingress-controller.sh"

    # Copy the common files for kubernetes
    cp "${hangarPath}/${commonKubernetesPath}"/*.sh "${localDirectory}/${scriptFilePath}"

    # Copy the script for the DNS name into the directory.
    cp "${hangarPath}/${templatesPath}/obtain-dns.sh" "${localDirectory}/${scriptFilePath}/obtain-dns.sh"    
}

function commitFiles {
    # Add the terraform files.
    git add .terraform -f

    # Changing all files to be executable.
    find .terraform -type f -name '*.sh' -exec git update-index --chmod=+x {} \;

    # Git commit and push it into the repository.
    git commit -m "Adding the terraform files"
    git push -u origin ${sourceBranch}
}

# Function that adds the variables to be used in the pipeline.
function addPipelineVariables {
    # Add the AWS service coonection variable.
    az pipelines variable create --name "awsServiceConnection" --pipeline-name ${pipelineName} --value ${awsServiceConnection}

    # Add the AWS S3 bucket name variable.
    az pipelines variable create --name "s3Bucket" --pipeline-name ${pipelineName} --value ${s3Bucket}

    # Add the AWS S3 Key path variable.
    az pipelines variable create --name "s3KeyPath" --pipeline-name ${pipelineName} --value ${s3KeyPath}

    # Add the EKS cluster name variable.
    az pipelines variable create --name "clustername" --pipeline-name ${pipelineName} --value ${clusterName}

    # Add the AWS Install Rancher variable
    az pipelines variable create --name "installRancher" --pipeline-name ${pipelineName} --value ${installRancher}

    # Add the variable to choose create or destroy AWS EKS cluster 
    az pipelines variable create --name "operation" --pipeline-name ${pipelineName} --value ${operation}

    #Create PAT to manage variable group and add pipeline variable
    #Get organization
    cd "${localDirectory}"
    organization=$(git config --get remote.origin.url)
    organization=$(echo $organization | cut -d/ -f4)
    echo -e "${green}Creating a PAT with necessary permissions..."
    patToken=$(az rest --method post --uri "https://vssps.dev.azure.com/$organization/_apis/tokens/pats?api-version=7.1-preview.1" --resource "https://management.core.windows.net/" --body '{ "displayName": "CreateEKSVariablesToken", "validTo": "2099-02-25T11:44:36.1966667Z", "scope": "vso.variablegroups_manage vso.build_execute" }')
    patToken=$(echo "$patToken" | python -c  "import sys, json; print(json.load(sys.stdin)['patToken']['token'])")
    az pipelines variable create --name "pat" --pipeline-name ${pipelineName} --value $patToken

}