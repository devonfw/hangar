# Path to the templates.
templatesPath="scripts/pipelines/azure-devops/templates/library-package"
# YAML file name.
yamlFile="library-package-pipeline.yml"
# Script name.
scriptFile="library-package.sh"
# Source branch.
sourceBranch="feature/library-package-pipeline"
# Path to the pipelines.
pipelinePath=".pipelines"
# Path to the scripts.
scriptFilePath=".pipelines/scripts"

# Determine feed name and type
case "$language" in

    "java")
        feed="maven-feed"
        feedType="Maven"
        # Mandatory flags.
        mandatoryFlags="$pipelineName,$localDirectory,$language,$buildPipelineName,$qualityPipelineName,"
    ;;

    "node")
        feed="npm-feed"
        feedType="npm"
        # Mandatory flags.
        mandatoryFlags="$pipelineName,$localDirectory,$language,$qualityPipelineName,"
    ;;

    *)
        echo "Language '${language}' is not supported."
    ;;
esac

# Function that copies the script to build the application.
function copyScript {
    # Copy the script.
    cp "${hangarPath}/${templatesPath}/${language}-${scriptFile}" "${localDirectory}/${scriptFilePath}/${scriptFile}"

    # Get organization
    cd "${localDirectory}"
    organization=$(git config --get remote.origin.url | cut -d/ -f4)

    # Create PAT
    echo -e "${green}Creating a PAT with necessary permissions...${white}"
    patToken=$(az rest --method post --uri "https://vssps.dev.azure.com/${organization}/_apis/tokens/pats?api-version=7.1-preview.1" --resource "https://management.core.windows.net/" --body '{ "displayName": "libraryDeployToken", "validTo": "2099-02-25T11:44:36.1966667Z", "scope": "vso.packaging_manage" }')
    patToken=$(echo "$patToken" | python -c  "import sys, json; print(json.load(sys.stdin)['patToken']['token'])")

    # Create feed
    echo -e "${green}Creating a ${feedType} feed...${white}"
    az rest --method post --uri "https://feeds.dev.azure.com/${organization}/_apis/packaging/feeds?api-version=7.1-preview.1" --resource "https://management.core.windows.net/" --body '{ "name": "'${feed}'" }' 1> /dev/null


    cd "${hangarPath}/${templatesPath}"
    export feed organization

    case "$feedType" in

    "npm")
        email="${organization}@dev.azure.com"
        encodedPatToken=$(python -c "import base64; print(base64.b64encode('${patToken}'.encode('ascii')).decode('ascii'))")
        export email encodedPatToken

        # Create user-level .npmrc
        envsubst < .npmrc.user.template > "${localDirectory}/${scriptFilePath}/.npmrc"

        # Create project .npmrc
        envsubst < .npmrc.project.template > "${localDirectory}/${scriptFilePath}/.npmrc.project.template"

        skipBuildPipeline="true"
    ;;

    "Maven")
        export patToken

        # Create settings.xml
        envsubst < settings.xml.template > "${localDirectory}/${scriptFilePath}/settings.xml"

        skipBuildPipeline="false"
    ;;

    esac

}

# Function that adds the variables to be used in the pipeline.
function addPipelineVariables {
    # Export information about whether or not the build pipeline should be skipped.
    az pipelines variable create --name "skipBuildPipeline" --pipeline-name "${pipelineName}" --value "${skipBuildPipeline}"
    # Add the name of the build pipeline name variable.
    [ -n "$buildPipelineName" ] && az pipelines variable create --name "buildPipelineName" --pipeline-name $pipelineName --value ${buildPipelineName}
    # Add the quality pipeline name as a var of the pipeline.
    az pipelines variable create --name "qualityPipelineName" --pipeline-name $pipelineName --value ${qualityPipelineName}
}
