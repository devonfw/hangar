# Mandatory flags
# For language and dockerFile, we put them in the same field because we need one of them (same for user/password with aws credentials)
if  test -z $awsAccessKey
then
    mandatoryFlags="$imageName,${dockerUser},${dockerPassword},$buildPipelineName,${language}${dockerFile},$qualityPipelineName,"
else
    mandatoryFlags="$imageName,${awsAccessKey},${awsSecretAccessKey},${awsRegion},$buildPipelineName,${language}${dockerFile},$qualityPipelineName,"
fi
# Path to the templates.
templatesPath="scripts/pipelines/azure-devops/templates/package"
# YAML file name.
yamlFile="package-pipeline.yml"
# Script name.
scriptFile="package.sh"
# Path to the pipelines.
pipelinePath=".pipelines"
# Path to the scripts.
scriptFilePath=".pipelines/scripts"
# Source branch.
sourceBranch="feature/package-pipeline"
#Dockerfile Paths depending on the langage
dockerfilePaths="quarkus-jvm:src/main/docker/Dockerfile.jvm quarkus:src/main/docker/Dockerfile.native"

function copyScript {

    # Check if the language is quarkus.
    if [[ $language == "quarkus"* ]]
    then
        language="quarkus"
    fi 

    # Copy the scripts needed for the execution of the pipeline.
    cp "${hangarPath}/${templatesPath}/${language}-${scriptFile}" "${localDirectory}/${scriptFilePath}/${scriptFile}"
}

function addPipelineVariables {

    # We set the path to the dockerfile depending on the language given.
    if test -z ${dockerFile}
    then
      for i in $dockerfilePaths
      do
        echo $i | grep $language > /dev/null && dockerFile=$(echo $i | cut -d':' -f2)
        break
      done
    fi

    # We get the name of the registry from the full image name
    firstPartImage=$(echo $imageName | cut -d'/' -f1)
    (echo $firstPartImage | grep "\." > /dev/null && registry=$firstPartImage) || registry="docker.io"

    # We create a variable group so the registry and the credentials to acces it are available for every pipelines
    az pipelines variable-group create --name registry_info --variable registry="$registry" imageName="$imageName" --authorize true > ./tmp_group_var
    group_id=$(cat  ./tmp_group_var | grep '"id"' | cut -d: -f2 | cut -d, -f1 | tr -d \")
    rm ./tmp_group_var
    if  test -z $awsAccessKey
    then
        az pipelines variable-group variable create --group-id $group_id --name docker_username --value "$dockerUser" --secret true
        az pipelines variable-group variable create --group-id $group_id --name docker_password --value "$dockerPassword" --secret true
    else
        az pipelines variable-group variable create --group-id $group_id --name aws_access_key --value "$awsAccessKey" --secret true
        az pipelines variable-group variable create --group-id $group_id --name aws_secret_access_key --value "$awsSecretAccessKey" --secret true
        az pipelines variable-group variable create --group-id $group_id --name region --value "$awsRegion"
        az pipelines variable-group variable create --group-id $group_id --name "isECR" --value "true"
    fi

    # Add the build pipeline name as a var of the pipeline.
    az pipelines variable create --name "buildPipelineName" --pipeline-name $pipelineName --value $buildPipelineName

    # Add the path to the dockerFile as a var of the pipeline.
    az pipelines variable create --name "relativeDockerfilePath" --pipeline-name $pipelineName --value $dockerFile

    # Add the quality pipeline name as a var of the pipeline.
    az pipelines variable create --name "qualityPipelineName" --pipeline-name $pipelineName --value $qualityPipelineName
}
