trigger: none

resources:
  pipelines:
  - pipeline: 'Quality-Pipeline'
    source: '$qualityPipelineName'
    trigger:
      branches:
        include:
        - 'release/*'
        - develop
        exclude:
        - 'feature/*'
        - master

parameters:
  - name: docker_username
    displayName: Docker username (non-AWS only)
    default: $(docker_username)
    type: string
  - name: docker_password
    displayName: Docker password (non-AWS only)
    default: $(docker_password)
    type: string
  - name: aws_access_key
    displayName: AWS access key (AWS only)
    default: $(aws_access_key)
    type: string
  - name: aws_secret_access_key
    displayName: AWS secret access key (AWS only)
    default: $(aws_secret_access_key)
    type: string
  - name: region
    displayName: AWS region (AWS only)
    default: $(region)
    type: string
  - name: imageName
    displayName: Image name
    default: $(imageName)
    type: string
  - name: registry
    displayName: Image registry
    default: $(registry)
    type: string

variables:
- group: registry_info

pool:
  vmImage: ubuntu-latest

steps:

- task: Bash@3
  displayName: 'Checking last Quality pipeline execution status'
  env:
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
  inputs:
    targetType: inline
    script: '$(Build.Repository.LocalPath)/.pipelines/scripts/check-pipeline-exec.sh $(qualityPipelineName) $(Build.SourceVersion) $(Build.SourceBranch)'

- bash: 'echo "The quality pipeline executed for this commit has failed.";exit 1'
  displayName: 'Quality pipeline failed'
  condition: eq(variables['result'], 'failed')

- bash: 'echo "The quality pipeline executed for this commit has been canceled.";exit 1'
  displayName: 'Quality pipeline canceled'
  condition: eq(variables['result'], 'canceled')

- bash: 'echo "There is no quality pipeline execution for this commit.";exit 1'
  displayName: 'Quality pipeline not found'
  condition: eq(variables['result'], '')

- bash: 'echo "The quality pipeline for this commit is not over yet.";exit 1'
  displayName: 'Quality pipeline not over'
  condition: eq(variables['result'], 'None')

- task: Bash@3
  displayName: 'Getting last Build pipeline execution to download artifact'
  env:
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
  inputs:
    targetType: inline
    script: '$(Build.Repository.LocalPath)/.pipelines/scripts/check-pipeline-exec.sh $(buildPipelineName) $(Build.SourceVersion) $(Build.SourceBranch)'

- task: DownloadPipelineArtifact@2
  displayName: 'Download Build pipeline artifact'
  inputs:
    source: 'specific'
    project: '$(System.TeamProject)'
    pipeline: $(buildPipelineName)
    runVersion: 'specific'
    downloadPath: $(Pipeline.Workspace)
    runId: $(runId)
    
- task: Bash@3
  displayName: "Copying build artifact to the repository path"
  inputs:
    targetType: inline
    script: 'cp -a $(Pipeline.Workspace)/BuildOutput/. $(Build.Repository.LocalPath)'

- task: Bash@3
  displayName: 'Build and push image to registry'
  inputs:
    targetType: 'inline'
    script: '$(Build.Repository.LocalPath)/.pipelines/scripts/package.sh -f $(Build.Repository.LocalPath)/$(relativeDockerfilePath) -t $(Build.Repository.LocalPath)/$(imageTagFile)  -c $(Build.Repository.LocalPath) -u ${{ parameters.docker_username }}  -p ${{ parameters.docker_password }} -r ${{ parameters.registry }} -i ${{ parameters.imageName }} -b $(Build.SourceBranch)'
  condition: eq(variables['isECR'], '')

- task: Bash@3
  displayName: 'Build and push image to registry (AWS)'
  inputs:
    targetType: 'inline'
    script: '$(Build.Repository.LocalPath)/.pipelines/scripts/package.sh -f $(Build.Repository.LocalPath)/$(relativeDockerfilePath) -t $(Build.Repository.LocalPath)/$(imageTagFile)  -c $(Build.Repository.LocalPath) -a ${{ parameters.aws_access_key }} -s ${{ parameters.aws_secret_access_key }} -l ${{ parameters.region }} -r ${{ parameters.registry }} -i ${{ parameters.imageName }} -b $(Build.SourceBranch)'
  condition: eq(variables['isECR'], 'true')
